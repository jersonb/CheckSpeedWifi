using Dapper;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;
using Npgsql;

namespace CheckSpeedWifi.Data
{
    public class DataService(IConfiguration configuration, ILogger<DataService> logger) : IDataService
    {
        private readonly string _connectionString = configuration.GetConnectionString("Postgres")
                                                    ?? throw new InvalidProgramException("Missing postgres connection stirng");

        private readonly ILogger<DataService> _logger = logger;

        private NpgsqlConnection GetConnection()
            => new(_connectionString);
        public async Task CreateDatabase()
        {
            var sqlCommand = @"
                CREATE SCHEMA IF NOT EXISTS checkspeedwifi;

                CREATE TABLE IF NOT EXISTS checkspeedwifi.measurementwifi
                (
	                id int4 NOT NULL GENERATED BY DEFAULT AS IDENTITY,
	                ""date"" timestamptz NOT NULL DEFAULT now(),
	                download numeric NOT NULL,
	                upload numeric NOT NULL,
	                ping numeric NOT NULL,
	                audit jsonb NOT NULL
                );
                
                CREATE TABLE IF NOT EXISTS checkspeedwifi.error
                (
                    id int4 NOT NULL GENERATED BY DEFAULT AS IDENTITY,
	                ""date"" timestamptz NOT NULL DEFAULT now(),
                    description varchar(1000) NOT NULL
                );
            ";

            try
            {
                using var connection = GetConnection();

                connection.Open();
                await connection.ExecuteAsync(sqlCommand);
                _logger.LogInformation("Data base was created");
            }
            catch (Exception ex)
            {
                _logger.LogCritical(ex, "Data base was not created {@ConnectionString}", _connectionString);
                throw;
            }
        }

        public async Task Insert(decimal download, decimal upload, decimal ping, object audit)
        {
            var sqlCommand = @"
                INSERT INTO checkspeedwifi.measurementwifi
                (download, upload, ping, audit)
                VALUES( @download, @upload, @ping, @audit::json );
            ";

            try
            {
                using var connection = GetConnection();

                connection.Open();
                await connection.ExecuteAsync(sqlCommand, new { download, upload, ping, audit = audit.ToString() });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error to insert data {@Download} {@Upload} {@Ping} {@Audit}", download, upload, ping, audit);
                throw;
            }
        }
        public async Task Error(string message)
        {
            var sqlCommand = @"
                INSERT INTO checkspeedwifi.error
                (description)
                VALUES( @message);
            ";

            try
            {
                using var connection = GetConnection();

                connection.Open();
                await connection.ExecuteAsync(sqlCommand, new { message });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error to insert data {@Message}", message);
                throw;
            }
        }

        public async Task SendReportStats()
        {

            var query = @"
                select 
                    (avg(m.download)/1000000)::numeric(10,2) ""Download"",
                    (avg(m.upload)/1000000)::numeric(10,2) ""Upload"",
                    avg(m.ping)::numeric(10,2) ""Ping""
                from checkspeedwifi.measurementwifi m 
                where m.""date"" > (now() - interval '7 day')
            ";
            using var connection = GetConnection();
            connection.Open();

            var result = await connection.QueryAsync<StatsAverageQueryResult>(query);
        }

        public async Task SendReportErrors()
        {

            var query = @"
                select 
                    e.""date""::date ""Date"", 
                    count(*)::int ""ErrorCount""
                from checkspeedwifi.error e 
                where e.""date"" between (now() - interval '7 day') and (now() - interval '1 day')
                group by e.""date""::date
                order by e.""date""::date desc
            ";
            using var connection = GetConnection();
            connection.Open();

            var result = await connection.QueryAsync<ErrorQueryResult>(query);
        }
        private record StatsAverageQueryResult(decimal Download, decimal Upload, decimal Ping);
        private record ErrorQueryResult(DateOnly Date, int ErrorCount);
    }
}