using Dapper;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;

namespace CheckSpeedWifi.Data
{
    public class DataService(IConfiguration configuration, ILogger<DataService> logger) : IDataService
    {
        private readonly string _connectionString = configuration.GetConnectionString("Postgres")
                                                    ?? throw new InvalidProgramException("Missing postgres connection stirng");

        private readonly ILogger<DataService> _logger = logger;

        public async Task CreateDatabase()
        {
            var sqlCommand = @"
                CREATE SCHEMA IF NOT EXISTS checkspeedwifi;

                CREATE TABLE IF NOT EXISTS checkspeedwifi.measurementwifi
                (
	                id int4 NOT NULL GENERATED BY DEFAULT AS IDENTITY,
	                ""date"" timetz NOT NULL DEFAULT now(),
	                download numeric NOT NULL,
	                upload numeric NOT NULL,
	                ping numeric NOT NULL,
	                audit jsonb NOT NULL
                );
            ";

            try
            {
                using var connection = new Npgsql.NpgsqlConnection(_connectionString);

                connection.Open();
                await connection.ExecuteAsync(sqlCommand);
                _logger.LogInformation("Data base was created");
            }
            catch (Exception ex)
            {
                _logger.LogCritical(ex, "Data base was not created");
                throw;
            }
        }

        public async Task Insert(decimal download, decimal upload, decimal ping, object audit)
        {
            var sqlCommand = @"
                INSERT INTO checkspeedwifi.measurementwifi
                (download, upload, ping, audit)
                VALUES( @download, @upload, @ping, @audit::jsonb);
            ";

            try
            {
                using var connection = new Npgsql.NpgsqlConnection(_connectionString);

                connection.Open();
                await connection.ExecuteAsync(sqlCommand, new { download, upload, ping, audit });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error to insert data {@Download} @{Upload} {@Ping} {@Audit}", download, upload, ping, audit);
                throw;
            }
        }
    }
}